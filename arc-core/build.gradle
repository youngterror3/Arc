sourceSets.main.java.srcDirs = ["src"]
sourceSets.test.java.srcDirs = ["test"]
sourceSets.test.resources.srcDirs = ["test/resources"]

dependencies{
    testImplementation libraries.junit
    testImplementation aproj(":natives:natives-desktop")
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

file("jni").mkdir()

jnigen{
    sharedLibName = "arc"
    temporaryDir = file("build/target/native").absolutePath
    libsDir = file("libs").absolutePath

    all{
        cppExcludes = ["iosgl/**", "soloud/src/audiosource/ay/**"]
        cppIncludes = ["*.cpp"]
        cIncludes = ["*.c"]
        headerDirs += ["soloud/include"]
        cppIncludes += ["soloud/src/core/**", "soloud/src/audiosource/**", "soloud/src/filter/**"]
        cIncludes += ["soloud/src/core/**", "soloud/src/audiosource/**", "soloud/src/filter/**"]
    }
    add(Linux, x64){
        cppIncludes += ["soloud/src/backend/miniaudio/*.cpp", "soloud/src/backend/alsa/*.cpp"]
        cppFlags = "-DWITH_MINIAUDIO -DWITH_ALSA -DMA_NO_PULSEAUDIO " + cppFlags
        libraries += " -lpthread -lrt -lasound -lm -ldl"
    }
    add(Windows, x32){
        cppIncludes += ["soloud/src/backend/miniaudio/*.cpp"]
        cppFlags = "-msse -DWITH_MINIAUDIO " + cppFlags
    }
    add(Windows, x64){
        cppIncludes += ["soloud/src/backend/miniaudio/*.cpp"]
        cppFlags = "-msse -DWITH_MINIAUDIO " + cppFlags
    }
    add(Android){
        linkerFlags += " -llog -lOpenSLES"
        cppIncludes += ["soloud/src/backend/miniaudio/*.cpp"]
        cppFlags = "-DWITH_MINIAUDIO " + cppFlags
    }
    add(MacOsX, x64){
        cppIncludes += ["soloud/src/backend/coreaudio/*.cpp"]
        cppFlags = "-std=c++11 -DWITH_COREAUDIO " + cppFlags
        libraries += "-Wl,-framework,CoreAudio -Wl,-framework,AudioToolbox"
    }
    add(IOS){
        headerDirs += ["iosgl"]
        cppExcludes = ["soloud/src/audiosource/ay/**"]
        cppIncludes += ["soloud/src/backend/coreaudio/*.cpp", "iosgl/**"]
        cppFlags = "-stdlib=libc++ -std=c++11 -DWITH_COREAUDIO " + cppFlags
    }
}

task fixWrap{
    doFirst{
        println "--FIXING SCRIPTS--"
        copy{
            from "../natives/memcpy_wrap.c"
            into "jni/"
        }

        def f = file("$rootDir/arc-core/jni/build-linux64.xml");
        if(f.exists()){
            f.text = f.text.replace("-Wl,-wrap,memcpy", "-Wl,-wrap,memcpy,-wrap,pow,-wrap,powf,-wrap,log,-wrap,logf,-wrap,exp,-wrap,expf,-wrap,clock_gettime")
        }
    }
}

getTasksByName("jnigen", true).each{
    it.finalizedBy fixWrap
}

task cleanNatives{
    doLast{
        delete{delete "$rootDir/arc-core/jni"}
        delete{delete "$rootDir/arc-core/libs"}
        delete{delete "$rootDir/arc-core/csrc/soloud"}
        delete{delete "$rootDir/arc-core/csrc/stb_image.h"}
    }
}

task preJni{

    if(!file("csrc/stb_image.h").exists()){
        println "Fetching stb_image source..."
        "curl -o $rootDir/arc-core/csrc/stb_image.h https://raw.githubusercontent.com/nothings/stb/master/stb_image.h".execute().waitFor()
    }

    if(!file("csrc/soloud").exists()){
        println "Fetching soloud source..."
        "git clone https://github.com/Anuken/soloud.git $rootDir/arc-core/csrc/soloud --depth 1".execute().waitFor()
    }

    copy{
        from "csrc/"
        into "jni/"
        include "**"
    }
}

//copies files into the right locations
task postJni{
    doLast{
        copy{
            from "libs/linux64", "libs/windows32", "libs/windows64", "libs/macosx64"
            into "../natives/natives-desktop/libs"
            include "**"
        }

        ["arm64-v8a", "x86", "x86_64", "armeabi-v7a"].each{ p ->
            copy{
                from "libs/$p"
                into "../natives/natives-android/libs/$p/"
                include "**"
            }
        }

        [".tvos", ""].each{ p ->
            copy{
                from "libs/ios32/libarc.a$p"
                into "../natives/natives-ios/libs/"
                include "**"
            }
        }
    }
}

jnigenBuild.dependsOn preJni
jnigenBuild.finalizedBy postJni